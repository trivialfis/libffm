#ifndef _LIBFFM_H
#define _LIBFFM_H

#include <string>

namespace ffm {

#cmakedefine01 USEOMP


using namespace std;

typedef float ffm_float;
typedef double ffm_double;
typedef int ffm_int;
typedef long long ffm_long;

struct ffm_node {
    ffm_int f;			// field index
    ffm_int j;			// feature index
    ffm_float v;		// value
};

struct ffm_model {
    ffm_int n;			// number of features
    ffm_int m;			// number of fields
    ffm_int k;			// number of latent factors
    ffm_float *W = nullptr;
    ffm_int normalization;
    ~ffm_model();
};

struct ffm_parameter
{
    ffm_float eta;	// learning rate
    ffm_float lambda; // regularization parameter
    ffm_int nr_iters;
    ffm_int k;		// number of latent factors
    ffm_int normalization;
    ffm_int auto_stop;
};

void ffm_parameter_init(ffm_parameter* param);

void ffm_read_problem_to_disk(string txt_path, string bin_path);

void ffm_save_model(ffm_model &model, string path);

ffm_model ffm_load_model(string path);

ffm_model ffm_train_on_disk(string tr_path, string va_path, ffm_parameter param);
ffm_model ffm_train_on_disk_cl(string tr_path, string va_path, ffm_parameter param);

ffm_float ffm_predict(ffm_node *begin, ffm_node *end, ffm_model &model);

} // namespace ffm

#endif // _LIBFFM_H
